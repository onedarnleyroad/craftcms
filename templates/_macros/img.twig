{# #
 # Responsive <img>
 # An image with srcset widths at standard breakpoints.
 # Also includes some basic defaults and lazyloading support.
 #
 # Usage:
 # {{ img.responsive(asset, 1920, {
 #   lazyload : true,
 #   ratio : 16 / 9,
 #   sizes : '(min-width: 1280) 60vw, 100vw',
 # }, {
 #   class : 'max-w-full mx-auto',
 # }) }}
 #
 # Will output something like:
 #   <img class="max-w-full mx-auto"
 #        src="data:image/svg+xml;charset=utf-8,%3Csvg%20width%3D%221920%22%20height%3D%221080%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3C%2Fsvg%3E"
 #        srcset="https://craftcms.ddev.site/volumes/uploads/_1920x1080_crop_center-center_none/image.jpg 1920w,
 #                https://craftcms.ddev.site/volumes/uploads/_425x239_crop_center-center_none/image.jpg 425w,
 #                https://craftcms.ddev.site/volumes/uploads/_640x360_crop_center-center_none/image.jpg 640w,
 #                https://craftcms.ddev.site/volumes/uploads/_768x432_crop_center-center_none/image.jpg 768w,
 #                https://craftcms.ddev.site/volumes/uploads/_1024x576_crop_center-center_none/image.jpg 1024w,
 #                https://craftcms.ddev.site/volumes/uploads/_1366x768_crop_center-center_none/image.jpg 1366w,
 #                https://craftcms.ddev.site/volumes/uploads/_1600x900_crop_center-center_none/image.jpg 1600w"
 #        width="1920"
 #        height="1080"
 #        alt=""
 #        loading="lazy"
 #        sizes="(min-width: 1280) 60vw, 100vw">
 #
 # @parm string|craft\elements\Asset image - An asset image or image URL string
 # @param null|number maxW - The max width the image should ever display at
 # @param array opts - Hash of options:
 #   @var bool lazyload - Whether the image should lazyload (default true)
 #   @var number ratio - Set to zero to not crop (default 0)
 #   @var string sizes - String of responsive sizes (default 100vw)
 #   @var array widths - Array of width transforms
 # @param hash attrs - Hash of attributes to add to img tag
 # #}
{% macro responsive(image, maxW = 1920, opts = {}, attrs = {}) %}

  {% from "_macros/svg.twig" import transparentDataUri %}

  {# merge opts with defaults #}
  {% set opts = {
    lazyload : true,
    ratio : 0,
    sizes : '100vw',
    widths : [ 1920, 1600, 1366, 1024, 768, 640, 425 ]
  }|merge(opts) %}

  {# if image is an asset, then we can transform it #}
  {% if image is instance of('craft\\elements\\Asset') %}

    {# Generate an array of widths, from big to small, that do not exceed max width #}
    {% set widths = [maxW]|merge(opts.widths|sort|filter(w => maxW > w)) %}

    {# Generate hash of transforms based on widths & opts.ratio #}
    {% set transforms = widths|map(w => {
      width : w,
      height : opts.ratio > 0 ? (w / opts.ratio)|round(2) : null
    }) %}

    {# Generate a placeholder in case we are lazyloading #}
    {% set placeholder = transparentDataUri(
      maxW,
      opts.ratio > 0 ? (maxW / opts.ratio)|round(2) : null
      ) %}

    {# Define img tag attributes to merge into default #}
    {% set assetAttrs = {
      alt:     image.alt|default(''),
      src:     opts.lazyload ? placeholder : image.url(transforms|last),
      srcset:  transforms|map(t => image.url(t) ~ ' ' ~ image.width(t) ~ 'w')|join(','),
      sizes:   opts.sizes,
      width:   image.width(transforms|last),
      height:  image.height(transforms|last),
    } %}
  {% endif %}

  {# #
   # BEGIN OUTPUT OF IMG TAG
   # The hash of options we pass:
   #   - starts assuming `image` is just a string
   #   - merged with `assetAttrs` if defined above, when `image` is an Asset
   #   - merged with `attrs`, for things like adding `class=` etc
   # #}
  {{ tag('img', {
    alt:     '',
    src:     image,
    width:   maxW,
    height:  opts.ratio > 0 ? (maxW / opts.ratio)|round(2) : null,
    loading: opts.lazyload ? 'lazy' : 'eager',
  }|merge(assetAttrs ?? {})|merge(attrs ?? {})) }}
{% endmacro %}

{# #
 # Dummy <img>
 # A dummy image courtesy of https://placehold.co/
 # Piggybacks off of responsive macro.
 #
 # Usage:
 #   {{ img.dummy(400, 300) }}
 #
 # Outputs:
 #   <img src="https://placehold.co/400x300"
 #        alt=""
 #        width="400"
 #        height="300"
 #        loading="lazy">
 #
 # @param number width - The width of the image (default 600)
 # @param number height - The height of the image (default 400)
 # @param bool lazyload - Whether to lazyload (default true)
 # #}
{% macro dummy(w = 600, h = 400, lazyload = true) %}
  {{ _self.responsive('https://placehold.co/' ~ w ~ 'x' ~ h, w, {
    ratio : w / h,
    lazyload : lazyload
  }) }}
{% endmacro %}
